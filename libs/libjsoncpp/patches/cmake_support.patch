Index: version.h.in
===================================================================
--- version.h.in	(revision 0)
+++ version.h.in	(revision 0)
@@ -0,0 +1,9 @@
+//
+// Don't edit this file it is autogenerated from CMakeLists with the version txt file
+//
+#ifndef JSON_VERSION_H_INCLUDED
+# define JSON_VERSION_H_INCLUDED
+
+#define JSON_CPP_VERSION @JSON_CPP_VERSION@
+
+#endif
Index: include/json/version.h
===================================================================
--- include/json/version.h	(revision 0)
+++ include/json/version.h	(revision 0)
@@ -0,0 +1,9 @@
+//
+// Don't edit this file it is autogenerated from CMakeLists with the version txt file
+//
+#ifndef JSON_VERSION_H_INCLUDED
+# define JSON_VERSION_H_INCLUDED
+
+#define JSON_CPP_VERSION 0.5.0
+
+#endif
Index: include/CMakeLists.txt
===================================================================
--- include/CMakeLists.txt	(revision 0)
+++ include/CMakeLists.txt	(revision 0)
@@ -0,0 +1,2 @@
+FILE(GLOB INCLUDE_FILES "json/*.h")
+INSTALL(FILES ${INCLUDE_FILES} DESTINATION include/json)
Index: src/lib_json/CMakeLists.txt
===================================================================
--- src/lib_json/CMakeLists.txt	(revision 0)
+++ src/lib_json/CMakeLists.txt	(revision 0)
@@ -0,0 +1,12 @@
+# Source files to compile with executable
+file(GLOB_RECURSE LIBJSONCPP_SOURCE_FILES *.cpp)
+
+ADD_LIBRARY(jsoncpp SHARED ${LIBJSONCPP_SOURCE_FILES})
+SET_TARGET_PROPERTIES(jsoncpp PROPERTIES VERSION ${JSON_CPP_VERSION} SOVERSION ${JSON_CPP_VERSION})
+
+# Install instructions for this target
+INSTALL(TARGETS jsoncpp 
+  RUNTIME DESTINATION bin
+  LIBRARY DESTINATION lib
+  ARCHIVE DESTINATION lib
+)
Index: src/jsontestrunner/CMakeLists.txt
===================================================================
--- src/jsontestrunner/CMakeLists.txt	(revision 0)
+++ src/jsontestrunner/CMakeLists.txt	(revision 0)
@@ -0,0 +1,5 @@
+# Source files to compile with executable
+file(GLOB_RECURSE JSONTESTRUNNER_SOURCE_FILES *.cpp)
+
+ADD_EXECUTABLE(jsontestrunner ${JSONTESTRUNNER_SOURCE_FILES})
+TARGET_LINK_LIBRARIES(jsontestrunner jsoncpp)
Index: src/CMakeLists.txt
===================================================================
--- src/CMakeLists.txt	(revision 0)
+++ src/CMakeLists.txt	(revision 0)
@@ -0,0 +1,3 @@
+add_subdirectory(lib_json)
+add_subdirectory(jsontestrunner)
+add_subdirectory(test_lib_json)
Index: src/test_lib_json/CMakeLists.txt
===================================================================
--- src/test_lib_json/CMakeLists.txt	(revision 0)
+++ src/test_lib_json/CMakeLists.txt	(revision 0)
@@ -0,0 +1,5 @@
+# Source files to compile with executable
+file(GLOB_RECURSE TESTLIBJSON_SOURCE_FILES *.cpp)
+
+ADD_EXECUTABLE(test_lib_json ${TESTLIBJSON_SOURCE_FILES})
+TARGET_LINK_LIBRARIES(test_lib_json jsoncpp)
Index: FindJsonCpp.cmake
===================================================================
--- FindJsonCpp.cmake	(revision 0)
+++ FindJsonCpp.cmake	(revision 0)
@@ -0,0 +1,98 @@
+# Module for locating the jsoncpp library.
+#
+# Add this file in your project before using it in a subfolder cmake/Modules and then 
+# add this in your project : 
+#  set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/Modules/") 
+#
+# You can then call find_package(JsonCpp REQUIRED) to find this library on your system.
+#
+# Customizable variables:
+#   JSONCPP_ROOT_DIR
+#     This variable points to the JSONCPP installation root directory. On Windows the
+#     library location typically will have to be provided explicitly using the
+#     -D command-line option. The directory should include the include/json,
+#     lib and/or bin sub-directories. This can be get on any system with a make install
+#     of the library which will result in a system folder with the right structure : 
+#           someinstalldir/lib
+#           someinstalldir/include
+#
+#     If someinstalldir is on the Path on windows, one of /usr/ /usr/local on linux CMake
+#       will find it thanks to this. (If using MinGW I advice specifying MinGW folder as 
+#       install prefix.
+#
+# Read-only variables:
+#   JSONCPP_FOUND
+#     Indicates whether the library has been found.
+#
+#   JSONCPP_INCLUDE_DIRS
+#     Points to the jsoncpp include directory.
+#
+#   JSONCPP_LIBRARIES
+#     Points to the jsoncpp libraries that should be passed to
+#     target_link_libararies.
+#
+# Usage examples
+#   find_package(JsonCpp REQUIRED)
+#   find_package(JsonCpp 0.5.0)
+#
+
+INCLUDE (FindPackageHandleStandardArgs)
+
+FIND_PATH (JSONCPP_ROOT_DIR
+  NAMES json/json.h include/json/json.h 
+  PATHS ENV JSONCPP_ROOT_DIR
+  DOC "jsoncpp root directory")
+
+# Re-use the previous path:
+FIND_PATH (JSONCPP_INCLUDE_DIR
+  NAMES json/json.h
+  HINTS ${JSONCPP_ROOT_DIR}
+  PATH_SUFFIXES include
+  DOC "jsoncpp include directory")
+
+FIND_LIBRARY (JSONCPP_LIBRARY_RELEASE
+  NAMES jsoncpp
+  HINTS ${JSONCPP_ROOT_DIR}
+  PATH_SUFFIXES ${_JSONCPP_POSSIBLE_LIB_SUFFIXES}
+  DOC "jsoncpp release library")
+
+IF (NOT DEFINED JSONCPP_LIBRARIES)
+  IF (JSONCPP_LIBRARY_RELEASE)
+    SET (JSONCPP_LIBRARY ${JSONCPP_LIBRARY_RELEASE} CACHE DOC
+      "jsoncpp library")
+  ENDIF (JSONCPP_LIBRARY_RELEASE)
+ENDIF (NOT DEFINED JSONCPP_LIBRARIES)
+
+IF (JSONCPP_INCLUDE_DIR)
+  SET (_JSONCPP_VERSION_HEADER ${JSONCPP_INCLUDE_DIR}/json/version.h)
+
+  IF (EXISTS ${_JSONCPP_VERSION_HEADER})
+    FILE (STRINGS ${_JSONCPP_VERSION_HEADER} _JSONCPP_VERSION_TMP REGEX
+      "^#define JSON_CPP_VERSION[ \t]+[0-9\\.]+")
+    
+
+    STRING (REGEX REPLACE
+        "^#define JSON_CPP_VERSION[ \t]+([0-9\\.]+)(.*)" "\\1" _JSONCPP_VERSION_TMP
+      ${_JSONCPP_VERSION_TMP})
+
+    STRING (REGEX REPLACE "([0-9]+)\\.[0-9]+\\.[0-9]+" "\\1" JSONCPP_VERSION_MAJOR
+      ${_JSONCPP_VERSION_TMP})
+    STRING (REGEX REPLACE "[0-9]+\\.([0-9]+)\\.[0-9]+" "\\1" JSONCPP_VERSION_MINOR
+      ${_JSONCPP_VERSION_TMP})
+    STRING (REGEX REPLACE "[0-9]+\\.[0-9]+\\.([0-9]+)" "\\1" JSONCPP_VERSION_PATCH
+      ${_JSONCPP_VERSION_TMP})
+
+    SET (JSONCPP_VERSION_COUNT 3)
+    SET (JSONCPP_VERSION
+      ${JSONCPP_VERSION_MAJOR}.${JSONCPP_VERSION_MINOR}.${JSONCPP_VERSION_PATCH})
+  ENDIF (EXISTS ${_JSONCPP_VERSION_HEADER})
+ENDIF (JSONCPP_INCLUDE_DIR)
+
+SET (JSONCPP_INCLUDE_DIRS ${JSONCPP_INCLUDE_DIR})
+SET (JSONCPP_LIBRARIES ${JSONCPP_LIBRARY})
+
+MARK_AS_ADVANCED (JSONCPP_ROOT_DIR JSONCPP_INCLUDE_DIR JSONCPP_LIBRARY
+  JSONCPP_LIBRARY_DEBUG JSONCPP_LIBRARY_RELEASE)
+
+FIND_PACKAGE_HANDLE_STANDARD_ARGS (jsoncpp REQUIRED_VARS JSONCPP_ROOT_DIR
+  JSONCPP_INCLUDE_DIR JSONCPP_LIBRARY VERSION_VAR JSONCPP_VERSION)
Index: CMakeLists.txt
===================================================================
--- CMakeLists.txt	(revision 0)
+++ CMakeLists.txt	(revision 0)
@@ -0,0 +1,22 @@
+cmake_minimum_required (VERSION 2.6)
+project (jsoncpp)
+
+# Read out version
+file (STRINGS "version" JSON_CPP_VERSION)
+
+configure_file (
+	"${PROJECT_SOURCE_DIR}/version.h.in"
+	"${PROJECT_SOURCE_DIR}/include/json/version.h"
+)
+
+# Define Executable Output Directory
+set (EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR})
+
+# Include our configuration header
+include_directories(${CMAKE_SOURCE_DIR}/include)
+
+# Build the different applications
+add_subdirectory (src)
+
+#install the includes
+add_subdirectory (include)
